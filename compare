#!/usr/bin/env python

import os
import click
from datetime import datetime
from subprocess import call, Popen, PIPE

all_reasoners = [ 'dlv', 'gringo' ]

class Run:
    def __init__(self, command, example, articulation, reasoner):
        self.command = command
        self.example = example
        self.articulation = articulation
        self.reasoner = reasoner

    def __hash__(self):
        return hash(self.__str__());   

    def __eq__(self, other):
        return self.command == other.command and self.example == other.example and self.articulation == other.articulation and self.reasoner == other.reasoner

    def __str__(self):
        return "{command} {example} {articulation} {reasoner}".format(command = self.command, example = self.example, articulation = self.articulation, reasoner = self.reasoner)

    def get_output(self):
       return get_root() + '/output/{command}/{example}/{articulation}/{reasoner}'.format(command = self.command, example = self.example, articulation = self.articulation, reasoner = self.reasoner)

def get_commands(commands):
   if commands is None:
      return os.listdir('./commands/')
   else:
      return commands.split(',')

def get_reasoners(reasoners):
   if reasoners is None:
      return all_reasoners
   else:
      return reasoners.split(',')

def get_root():
    return os.path.abspath(os.path.dirname(__file__))

def do_compare(run_a, run_b):
    print "--- compare: {run_a} vs {run_b} ---".format(run_a = run_a, run_b = run_b)
    p = Popen("git diff --no-index {output_run_a} {output_run_b}".format(output_run_a = run_a.get_output(), output_run_b = run_b.get_output()), stdout=PIPE, stderr=PIPE, shell=True)
    stdout, stderr = p.communicate()
    print stdout
    print stderr
    print '-- end compare ---'
   
def do_compare_gold_standard(run):
    print "--- compare: {run} vs gold_standard ---".format(run = run)    
    p = Popen("git diff {output}".format(output=run.get_output()), stdout=PIPE, stderr=PIPE, shell=True)
    stdout, stderr = p.communicate()
    print stdout
    print stderr
    print '-- end compare ---'

@click.command()
@click.option('--commands', default=None, help='Provide a comma separated list from the available commands files (./commands/{commands})')
@click.option('--examples', default=None, help='Provide a comma separated list from the available examples (./examples/{example})')
@click.option('--articulations', default=None, help='Provide a comma separated list from the available example articulations (./examples/{example}/{articulations}')
@click.option('--reasoners', default=','.join(all_reasoners), help='Provide a comma separated list from the available reasoners:  \'dlv\' and \'gringo\'')
@click.option('--compare_gold_standard', is_flag=True)
def compare(commands, examples, articulations, target, reasoners, compare_gold_standard):
   if examples is None:
      return
   examples = examples.split(',')
   if articulations is None:
      return
   articulations = articulations.split(',')
   commands = get_commands(commands)
   reasoners = get_reasoners(reasoners)
   #print commands
   #print examples
   #print articulations
   #print reasoners

   runs = set()
   for command in commands:
     for example in examples:
        for articulation in articulations:
           for reasoner in reasoners:
              runs.add(Run(command, example, articulation, reasoner))
   if len(runs) == 1:
      compare_gold_standard = True
   if compare_gold_standard:
      for run_a in runs:
         do_compare_gold_standard(run_a)

   #one vs all
   compared_runs = set()
   for run_a in runs:
      compared_runs.add(run_a)
      for run_b in runs:
         if not run_b in compared_runs:
            do_compare(run_a, run_b)

if __name__ == '__main__':
    compare()
