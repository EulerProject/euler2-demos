#!/usr/bin/env python

import os
import sys
import shutil
from subprocess import call, Popen, PIPE
import yaml
import yaml.constructor
from collections import OrderedDict
import re
import click

class OrderedDictYAMLLoader(yaml.Loader):
    """
    A YAML loader that loads mappings into ordered dictionaries.
    """

    def __init__(self, *args, **kwargs):
        yaml.Loader.__init__(self, *args, **kwargs)

        self.add_constructor(u'tag:yaml.org,2002:map', type(self).construct_yaml_map)
        self.add_constructor(u'tag:yaml.org,2002:omap', type(self).construct_yaml_map)

    def construct_yaml_map(self, node):
        data = OrderedDict()
        yield data
        value = self.construct_mapping(node)
        data.update(value)

    def construct_mapping(self, node, deep=False):
        if isinstance(node, yaml.MappingNode):
            self.flatten_mapping(node)
        else:
            raise yaml.constructor.ConstructorError(None, None,
                'expected a mapping node, but found %s' % node.id, node.start_mark)

        mapping = OrderedDict()
        for key_node, value_node in node.value:
            key = self.construct_object(key_node, deep=deep)
            try:
                hash(key)
            except TypeError, exc:
                raise yaml.constructor.ConstructorError('while constructing a mapping',
                    node.start_mark, 'found unacceptable key (%s)' % exc, key_node.start_mark)
            value = self.construct_object(value_node, deep=deep)
            mapping[key] = value
        return mapping

class Command:
    def __init__(self, key, value):
        self.key = key
        self.value = value

def get_root():
    return os.path.abspath(os.path.dirname(__file__))

def get_output(commands, example, articulations, reasoner):
    if example is None:
       example = ''
    if articulations is None:
       articulations = ''
    if reasoner is None:
       reasoner = ''
    return get_root() + '/output/{commands}/{example}/{articulations}/{reasoner}'.format(commands = commands, example = example, articulations = articulations, reasoner = reasoner)

def get_commands_file_path(commands):
    return get_root() + '/commands/{commands}'.format(commands = commands)

def execute(commands, example, articulations, reasoner, key, value):
    print 'run {key} effectively with: {value}'.format(key=key, value=value)
    output = get_output(commands, example, articulations, reasoner)
    with open(os.path.join(output, '%s.stdout' % key), 'w+') as out:
        with open(os.path.join(output, '%s.stderr' % key), 'w+') as err:
            with open(os.path.join(output, '%s.returncode' % key), 'w+') as rc:
                print value
                p = Popen(value, stdout=PIPE, stderr=PIPE, shell=True)
                stdout, stderr = p.communicate()
                print stdout
                print stderr
	        out.write(stdout)
                err.write(stderr)
                rc.write('%s' % p.returncode)
            
def run_clean(commands, example, articulations, reasoner):
    output = get_output(commands, example, articulations, reasoner)
    for f in os.listdir(output):
	path = output + '/' + f
        if os.path.isfile(path):
	    if not f.startswith('.'):
            	os.remove(path)
        if os.path.isdir(path):
            shutil.rmtree(path)

def get_all_commands(doc):
    result = []
    for k, v in doc.items():
        result.append(Command(k, v))
    return result

def get_commands_sequence(doc, start, end):
    result = []
    inside = False
    for k, v in doc.items():
        if inside:
            result.append(Command(k, v))
        if k == start:
            result.append(Command(k, v))
            inside = True
        if k == end:
            inside = False
    return result
            
def get_commands_list(doc, commands):
    result = []
    for command in commands:
        result.append(Command(command, doc[command]))
    return result

@click.command()
@click.option('--commands', default='', help='Choose from one of the available commands files')
@click.option('--example', default='', help='Choose from one of the available examples')
@click.option('--articulations', default='', help='Choose from one of the available example articulations')
@click.option('--target', default='all', help='Choose between \'all\', a list (\'command1,command2,...\') or a sequence (\'command1-command3\') of command labels or \'clean\'. Default: all')
@click.option('--reasoner', default='dlv', help='Choose between \'dlv\' and \'gringo\'')
def run(commands, example, articulations, target, reasoner):
    root = get_root()
    output = get_output(commands, example, articulations, reasoner)
    commands_file_path = get_commands_file_path(commands)
    print '===> Run demo {commands} {example} {target} {reasoner}'.format(commands = commands, example = example, target = target, reasoner = reasoner)
    if not os.path.exists(output):
        os.makedirs(output)
    with open(commands_file_path, 'r') as commands_file:
        doc = yaml.load(commands_file, OrderedDictYAMLLoader)
	with open(os.path.join(output, 'executed_commands'), 'w+') as cmds_file:
   	    cmds = []
            if target == 'all':
                cmds = get_all_commands(doc)
            elif target == 'clean':
                run_clean(commands, example, articulations, reasoner)
            elif ',' in target:
                cmds = get_commands_list(doc, target.split(','))
            elif '-' in target:
                cmds = get_commands_sequence(doc, target.split('-')[0], target.split('-')[-1])
            if cmds:
	        for cmd in cmds:
		    print 'run {key} with: {value}'.format(key=cmd.key, value=cmd.value)
                    value = cmd.value
		    show_command = cmd.value
                    value = value.replace('{.}', root)
		    show_command = show_command.replace('{.}', '.')
                    value = value.replace('{commands}', commands)
		    show_command = show_command.replace('{commands}', commands)
                    value = value.replace('{example}', example)
                    show_command = show_command.replace('{example}', example)
                    value = value.replace('{articulations}', articulations)
                    show_command = show_command.replace('{articulations}', articulations)
                    value = value.replace('{reasoner}', reasoner)
                    show_command = show_command.replace('{reasoner}', reasoner)
                    cmds_file.write(show_command + '\n')
		    execute(commands, example, articulations, reasoner, cmd.key, value)
    clean_outputs(commands, example, articulations, reasoner)

def clean_outputs(commands, example, articulations, reasoner):
    root = get_root()
    output = get_output(commands, example, articulations, reasoner)
    report = root + '/report.csv'
    lastrun_timstamp = output + '/lastrun.timestamp'
    logs = output + '/logs'
    if os.path.isfile(report):
    	os.remove(report)
    if os.path.isfile(lastrun_timstamp):
    	os.remove(lastrun_timstamp)
    if os.path.isdir(logs):
    	shutil.rmtree(logs)
    #for root, dirs, files in os.walk(output):
    #	for file in filter(lambda x: re.match('^.*\.pdf$', x), files):
    #	     os.remove(os.path.join(root, file))

if __name__ == '__main__':
    run()
